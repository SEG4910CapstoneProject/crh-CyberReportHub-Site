/**
 * CyberReportHub API
 * The API to interact with CyberReportHub
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { ArticleByLinkRequest } from '../model/articleByLinkRequest';
import { JsonArticleReportResponse } from '../model/jsonArticleReportResponse';
import { UidResponse } from '../model/uidResponse';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class ArticlesService {
  protected basePath = 'http://localhost:51009';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Adds a new article
   * This endpoint updates the specified article
   * @param title
   * @param link
   * @param description
   * @param publishDate Start date (YYYY-MM-DD)
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addArticle(
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<UidResponse>;
  public addArticle(
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<UidResponse>>;
  public addArticle(
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<UidResponse>>;
  public addArticle(
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (title === null || title === undefined) {
      throw new Error(
        'Required parameter title was null or undefined when calling addArticle.'
      );
    }

    if (link === null || link === undefined) {
      throw new Error(
        'Required parameter link was null or undefined when calling addArticle.'
      );
    }

    if (description === null || description === undefined) {
      throw new Error(
        'Required parameter description was null or undefined when calling addArticle.'
      );
    }

    if (publishDate === null || publishDate === undefined) {
      throw new Error(
        'Required parameter publishDate was null or undefined when calling addArticle.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (title !== undefined && title !== null) {
      queryParameters = queryParameters.set('title', <any>title);
    }
    if (link !== undefined && link !== null) {
      queryParameters = queryParameters.set('link', <any>link);
    }
    if (description !== undefined && description !== null) {
      queryParameters = queryParameters.set('description', <any>description);
    }
    if (publishDate !== undefined && publishDate !== null) {
      queryParameters = queryParameters.set('publish-date', <any>publishDate);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<UidResponse>(
      'post',
      `${this.basePath}/api/v1/articles/add`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Update article
   * This endpoint updates the specified article
   * @param id The article id
   * @param title
   * @param link
   * @param description
   * @param publishDate Start date (YYYY-MM-DD)
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public editArticle(
    id: string,
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public editArticle(
    id: string,
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public editArticle(
    id: string,
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public editArticle(
    id: string,
    title: string,
    link: string,
    description: string,
    publishDate: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling editArticle.'
      );
    }

    if (title === null || title === undefined) {
      throw new Error(
        'Required parameter title was null or undefined when calling editArticle.'
      );
    }

    if (link === null || link === undefined) {
      throw new Error(
        'Required parameter link was null or undefined when calling editArticle.'
      );
    }

    if (description === null || description === undefined) {
      throw new Error(
        'Required parameter description was null or undefined when calling editArticle.'
      );
    }

    if (publishDate === null || publishDate === undefined) {
      throw new Error(
        'Required parameter publishDate was null or undefined when calling editArticle.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (title !== undefined && title !== null) {
      queryParameters = queryParameters.set('title', <any>title);
    }
    if (link !== undefined && link !== null) {
      queryParameters = queryParameters.set('link', <any>link);
    }
    if (description !== undefined && description !== null) {
      queryParameters = queryParameters.set('description', <any>description);
    }
    if (publishDate !== undefined && publishDate !== null) {
      queryParameters = queryParameters.set('publish-date', <any>publishDate);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>(
      'patch',
      `${this.basePath}/api/v1/articles/${encodeURIComponent(String(id))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get article
   * This endpoint gets the specified article
   * @param id The article id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getArticle(
    id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<JsonArticleReportResponse>;
  public getArticle(
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<JsonArticleReportResponse>>;
  public getArticle(
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<JsonArticleReportResponse>>;
  public getArticle(
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getArticle.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*', 'application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<JsonArticleReportResponse>(
      'get',
      `${this.basePath}/api/v1/articles/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get article by its link
   * This endpoint gets the specified article by its link if exists
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getArticleByLink(
    body: ArticleByLinkRequest,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<JsonArticleReportResponse>;
  public getArticleByLink(
    body: ArticleByLinkRequest,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<JsonArticleReportResponse>>;
  public getArticleByLink(
    body: ArticleByLinkRequest,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<JsonArticleReportResponse>>;
  public getArticleByLink(
    body: ArticleByLinkRequest,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling getArticleByLink.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*', 'application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<JsonArticleReportResponse>(
      'post',
      `${this.basePath}/api/v1/articles/link`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
